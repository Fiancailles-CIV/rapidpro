# Generated by Django 4.1.9 on 2023-06-22 10:17

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Handles INSERT statements on msgs_msg_labels table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_labels_on_insert() RETURNS TRIGGER AS $$
BEGIN
    -- add label count for all new rows
    INSERT INTO msgs_labelcount("label_id", "is_archived", "count", "is_squashed")
    SELECT n.label_id, m.visibility != 'V', count(*), FALSE FROM newtab n
    INNER JOIN msgs_msg m ON m.id = n.msg_id
    GROUP BY n.label_id, m.visibility != 'V';

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles DELETE statements on msgs_msg_labels table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_labels_on_delete() RETURNS TRIGGER AS $$
BEGIN
    -- add negative label count for all deleted rows
    INSERT INTO msgs_labelcount("label_id", "is_archived", "count", "is_squashed")
    SELECT o.label_id, m.visibility != 'V', -count(*), FALSE FROM oldtab o
    INNER JOIN msgs_msg m ON m.id = o.msg_id
    GROUP BY o.label_id, m.visibility != 'V';

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER temba_msg_labels_on_insert
AFTER INSERT ON msgs_msg_labels REFERENCING NEW TABLE AS newtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_msg_labels_on_insert();

CREATE TRIGGER temba_msg_labels_on_delete
AFTER DELETE ON msgs_msg_labels REFERENCING OLD TABLE AS oldtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_msg_labels_on_delete();

DROP TRIGGER temba_msg_labels_on_change_trg ON msgs_msg_labels;
DROP FUNCTION temba_msg_labels_on_change();
DROP FUNCTION temba_insert_label_count(_label_id INT, _count INT);
"""


class Migration(migrations.Migration):
    dependencies = [("msgs", "0241_update_db_triggers")]

    operations = [migrations.RunSQL(SQL)]
